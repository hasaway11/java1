1. 객체지향 구성요소
- 캡슐화 : 필드와 메소드를 모아 클래스를 만들어라
- 정보은닉 : 클래스에 케이스를 씌워서 보호해라(private)
- 상속 
	옛날) 이미 작성한 코드를 상속받아서 재사용하자
	현재) 추상적인 부모와 구체적인 자식으로 계층화하자
- 다형성

2. access modifier
- 생략 : 같은 패키지는 접근가능. 일반적으로 비권장
- public
- private : 외부에서는 접근할 수 없다
- protected : 자식은 접근 가능
              상속하면 부모의 멤버지만 자식에서 초기화한다
              

3. 상속
- "기존 코드를 재사용 + 기능의 확장"으로 탄생
  여러 클래스를 재사용하는 것이 효과적 -> 다중상속을 지원
  다중상속의 단점은 무겁고, 복잡하다 -> 자바는 단일 상속만 지원
	class 복합기 extends 스캐너, 팩스, 복사기 {}

4. 상속의 개념이 바뀌었다
- 원래의 상속은 extends : 상속받아 기능을 키운다
- 현재의 상속은 override : 부모가 메소드를 정해준다  
   
5. 객체지향 구성요소
- 캡슐화 : 클래스를 잘 만들어라
- 정보은닉 : 되도록이면 private
- 상속
- 다형성 : 상황에 따라 다르게 동작(오버로드, 오버라이드)

6. 객체지향 원칙
- 단일책임원칙 : 객체는 1인분만 하자 -> 클래스는 가능한한 작게
- 개방폐쇄원칙 : 기능의 개선은 적용되야하지만 그것이 코드의 변경을 가져와서는 안된다
              (개선에 대해서는 열려있고, 변경에 대해서는 닫혀있다)
- 리스코프치환원칙 : 부모와 자식은 항상 치환가능해야 한다
		class 부모 { }
		class 자식 extends 부모 { int a; }
		자식 ob = new 자식();
		ob.a=100;			// 여기서 ob를 부모의 참조변수로 바꾸면?
 
 		자식은 extends하면 안된다 -> 부모와 자식은 똑같이 생겨야한다
 		부모는 메소드를 정해준다, 자식은 메소드를 구현한다
   
   
   
   
   
   
   
   
   
   
   
   
   
   
         